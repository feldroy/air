# Air Web Framework - Context for LLMs

Air is a Python web framework that provides a friendly layer over FastAPI for building modern web applications that combine beautiful HTML pages with powerful REST APIs.

## Core Characteristics

- **Built on FastAPI**: Air extends FastAPI, so anything you can do with FastAPI, you can do with Air
- **HTML-First**: Designed to make generating HTML with Python fast and intuitive
- **Type-Friendly**: Heavily typed and documented for excellent IDE/AI integration
- **HTMX Integration**: First-class support for HTMX for reactive web applications

## Air Tags - HTML Generation System

Air Tags are Python classes that render HTML, providing a fast and expressive way to generate HTML content:

### Basic Usage
```python
import air

# Simple tag
air.H1("Hello, Air!")  # renders: <h1>Hello, Air!</h1>

# Nested tags
air.Article(
    air.H1("Title"),
    air.P("Content", class_="subtitle")
)
```

### Key Features
- Every Air Tag has a `render()` method that returns HTML
- Keyword arguments become HTML attributes
- Use `class_` for CSS classes, `for_` for label associations
- Special character attributes use kwargs: `**{'@data': 6}`
- Boolean attributes: `selected=True` renders as `selected`, `selected=False` omits attribute
- SVG support via `air.svg` module with case-sensitive tags

### Custom Air Tags
```python
# Class-based
class MyTag(air.Tag):
    pass

# Function-based (for quick components)
def card(*content, header: str, footer: str):
    return air.Article(
        air.Header(header),
        *content,
        air.Footer(footer)
    )
```

### Multiple Children (HTMX)
Use `air.Tags` as a wrapper that doesn't generate HTML for returning multiple elements:
```python
air.Tags(
    air.Button('Added!', hx_post='/cart/add', hx_swap_oob='true'),
    air.A('Cart', id='cart-icon', href='/cart')
)
```

## Layouts System

Air layouts automatically organize content into proper HTML structure:

### Built-in Layouts
- `air.layouts.mvpcss()`: MVP.css styling with HTMX included

### Layout Philosophy
Air automatically separates head and body content using intelligent filtering:
- Head tags: Title, Style, Meta, Link, Script, Base
- Body tags: Everything else

```python
# Mixed tags are automatically sorted
air.layouts.mvpcss(
    air.Title("My App"),      # Goes to <head>
    air.H1("Welcome"),        # Goes to <body>
    air.Meta(name="description", content="App"),  # Goes to <head>
    air.P("Content")          # Goes to <body>
)
```

### Custom Layouts
```python
def my_layout(*children, **kwargs):
    head_tags = air.layouts.filter_head_tags(children)
    body_tags = air.layouts.filter_body_tags(children)
    
    return air.Html(
        air.Head(*head_tags),
        air.Body(air.Main(*body_tags))
    ).render()
```

## Forms with Pydantic Integration

Air Forms are powered by Pydantic for both display and validation:

```python
from pydantic import BaseModel
from air import AirForm, AirField

class ContactModel(BaseModel):
    name: str
    email: str = AirField(type="email", label="Email")

class ContactForm(AirForm):
    model = ContactModel

# Usage
form = ContactForm()
form.render()  # Displays form HTML
form.validate(data)  # Validates with Pydantic
```

Forms automatically generate proper HTML with labels, inputs, and validation error display.

## Jinja Integration

Air provides first-class Jinja support for template rendering:

```python
jinja = air.JinjaRenderer(directory="templates")

@app.get('/')
def index(request: Request):
    content = air.Main(
        air.H1("Air Tags content"),
        air.P("Mixed with Jinja")
    )
    return jinja(
        request,
        name="base.html",
        content=content
    )
```

Air Tags and Jinja can be mixed - use Jinja for layouts and Air Tags for content and components.

## FastAPI Integration

Air is designed to work seamlessly with FastAPI:

```python
import air
from fastapi import FastAPI

app = air.Air()  # Air app for web pages
api = FastAPI()  # FastAPI for API endpoints

@app.get("/")
def homepage():
    return air.layouts.mvpcss(
        air.Title("My App"),
        air.H1("Welcome")
    )

@api.get("/data")
def api_data():
    return {"message": "API response"}

# Mount API under /api
app.mount("/api", api)
```

## Installation & Setup

```bash
# Basic setup
mkdir myapp && cd myapp
uv venv && source .venv/bin/activate
uv add "air[standard]"

# Run development server
fastapi dev
```

### HTMX Endpoints
```python
@app.post('/update')
def update_content():
    return air.Div("Updated content", hx_swap_oob="true", id="target")
```

### Form Handling
```python
@app.post('/submit')
async def handle_form(request: air.Request):
    form_data = await request.form()
    # Process form data
    return air.P("Form submitted successfully")
```

This framework is ideal for developers who want the power of FastAPI with elegant HTML generation capabilities, especially when building applications that need both web pages and API endpoints.

## Documentation

- Official Docs: https://feldroy.github.io/air/
- Source Code: https://github.com/feldroy/air
